// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  posts     Post[]
  comments  Comment[]
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       Post[]
  
  @@map("categories")
}

model Post {
  id         String   @id @default(cuid())
  title      String
  content    String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  authorId   String
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  authorId  String
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  metadata  Json?

  @@map("messages")
}

enum MessageRole {
  USER
  ASSISTANT
}

model Important {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  @@map("important")
}
